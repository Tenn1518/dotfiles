;; -*-lisp-*-
;;
;; Stump window manager configuration.

;; Keybindings are chosen to reflect vim.

;; Dependencies: brightnessctl, nm-applet, pamixer, stumpwm-contrib,
;; stumpwm-dmenu

(in-package :stumpwm)

(set-prefix-key (kbd "s-q"))            ; Reflects tmux prefix key `C-q'

(load "/usr/lib/quicklisp/setup.lisp")

;; Setup REPL
;; Connect from Emacs with `M-x sly-connect localhost 1234'
(ql:quickload "slynk")
(defvar *is-slynk-started* nil)
(defcommand toggle-slynk () ()
  (if *is-slynk-started*
      (progn
        (slynk:stop-server 1234)
        (setf *is-slynk-started* nil)
        (message "Slynk server ended."))
      (progn
        (slynk:create-server :port 1234 :dont-close t)
        (setf *is-slynk-started* t)
        (message "Slynk server started on port 1234."))))

;;; X compositing
(run-shell-command "picom")

;;; Interface

;;;; Font
(ql:quickload "clx-truetype")
(load-module "ttf-fonts")
(xft:cache-fonts)
(set-font (make-instance 'xft:font :family "Meslo LG S"
                                   :subfamily "Regular"
                                   :size 11))

;;;; Gaps

;; (load-module "swm-gaps")
;; (setf swm-gaps::*head-gaps-size* 0)
;; (setf swm-gaps::*inner-gaps-size* 5)
;; (setf swm-gaps::*outer-gaps-size* 10)

;; (swm-gaps::toggle-gaps-on)

;;;; Modeline
(load-module "battery-portable")
(setf battery-portable::*no-battery-info* "")

;; colors
(setf *mode-line-background-color* "#1c1e1f"
      *mode-line-foreground-color* "#d6d6d4"
      *mode-line-border-color* "#1c1b1b"
      *mode-line-border-width* 1)

;; format
(setf *group-format* " %t ")
(setf *window-format* "%m%c%m")
(setf *time-modeline-string* "%m/%e/%y %l:%M %p")
;; https://www.shutterstock.com/blog/neon-color-palettes/ :: source of hex codes
(setf *screen-mode-line-format*
      '("[%g] %W^>^(:fg \"#fb2874\")(date %d)^n  ^(:fg \"#66d9ef\")(batt %B)^n     "))
(setf *mode-line-timeout* 2)

;; start modeline
(enable-mode-line (current-screen) (current-head) t)

(defcommand toggle-ml () ()
  (toggle-mode-line (current-screen) (current-head)))

;; tray icons
(ql:quickload "xembed")
(load-module "stumptray")
(stumptray::stumptray)

;;; Launching Programs
(defcommand rofi-windowlist () ()
  (run-shell-command "rofi -show windowcd"))
(defcommand rofi-run () ()
  ;; (run-shell-command "rofi -show drun")
  (run-shell-command "rofi -modi windowcd,run -show combi --combi-modi windowcd,drun"))
(defcommand rofi-windowlist-global () ()
  (run-shell-command "rofi -show window"))

(let ((map *top-map*))
  (define-key map (kbd "s-;") "colon")
  (define-key map (kbd "s-SPC") "rofi-run")
  (define-key map (kbd "s-f") "rofi-windowlist")
  (define-key map (kbd "s-F") "rofi-windowlist-global")
  (define-key map (kbd "s-:") "eval"))

;;; Workspaces and automatic window placement

;; Stop scripted window placement messages
;; (setf *suppress-window-placement-indicator* t)

(setf *default-group-name* "main")

(defvar *media-group* "media")
(gnewbg *media-group*)

(gnewbg "1")
(gnewbg "2")

;; Media applications are automatically placed into its own group
(define-frame-preference *media-group*
  (0 nil t   :class "Steam")
  (0 nil t   :class "Minecraft Launcher")
  (0 t   t   :class "Minecraft")
  (0 nil t   :class "PCSX2")
  (0 t   t   :class "discord")
  (0 nil t   :class "Spotify"))

;; Binds
(define-key *groups-map* (kbd "f") "gnew-float")
(let ((map *top-map*))
  (define-key map (kbd "s-g") *groups-map*)
  (define-key map (kbd "C-s-p") "gprev")
  (define-key map (kbd "C-s-n") "gnext")
  (define-key map (kbd "s-N") "gnext-with-window")
  (define-key map (kbd "s-P") "gprev-with-window")
  ;; TODO: Swap group with previous and next group in order
  ;; (define-key map (kbd "C-s-p") "gswapprev")
  (define-key map (kbd "C-s-f") "grouplist")
  (define-key map (kbd "C-s-k") "gkill")
  (define-key map (kbd "C-s-c") "gnew"))

;;; Audio
;; Commands are run with pamixer.

(defcommand vol-up (arg) ((:number "Increase volume by: "))
  (run-shell-command (format nil "pamixer -i ~S"
                             arg))
  (message (run-shell-command "pamixer --get-volume-human" t)))

(defcommand vol-down (arg) ((:number "Decrease volume by: "))
  (run-shell-command (format nil "pamixer -d ~S"
                             arg))
  (message (run-shell-command "pamixer --get-volume-human" t)))

(defcommand vol-mute () ()
  (run-shell-command "pamixer -t")
  (message (run-shell-command "pamixer --get-volume-human" t)))

(let ((map *top-map*))
  (define-key map (kbd "XF86AudioRaiseVolume") "vol-up 4")
  (define-key map (kbd "XF86AudioLowerVolume") "vol-down 4")
  (define-key map (kbd "M-S-F7") "vol-up 2")
  (define-key map (kbd "M-S-F6") "vol-down 2")
  (define-key map (kbd "XF86AudioMute") "vol-mute")
  ;; Super+[1,9] switches group
  (dotimes (i 9)
    (unless (= i 0)
      (define-key map (kbd (format nil "s-~D" i)) (format nil "gselect ~D" i)))))

;;; Brightness
;; Commands are run with brightnessctl.

(defvar *light-max* nil)

(defun light-info ()
  "Print the current brightness percentage reported by brightnessctl."
  (unless *light-max*
    (setf *light-max* (parse-integer (run-shell-command "brightnessctl m" t))))
  (let* ((b (parse-integer (run-shell-command "brightnessctl g" t)))
         (percent (* (/ b *light-max*)
                     100)))
    (message (format nil "~D%" percent))
    percent))

(defcommand light-up (arg) ((:number "Increase brightness by: "))
  (run-shell-command (format nil "brightnessctl s +~D%"
                             arg))
  (light-info))

(defcommand light-down (arg) ((:number "Decrease brightness by: "))
  (run-shell-command (format nil "brightnessctl s ~D%-"
                             arg))
  (light-info))

(let ((map *top-map*))
  (define-key map (kbd "XF86MonBrightnessUp") "light-up 4")
  (define-key map (kbd "XF86MonBrightnessDown") "light-down 4")
  (define-key map (kbd "M-S-F2") "light-down 2")
  (define-key map (kbd "M-S-F3") "light-up 2"))

;;; Frames

;; Change focus on click
(setf *mouse-focus-policy* :click)

;; `s-Q b' hides mouse
(setf *banish-pointer-to* :screen)

;; `s-b' brings mouse to current window
(load-module "beckon")

;; Move floating windows with Super+drag
(setf *float-window-modifier* :SUPER)

(defcommand my-windowlist () ()
  (let ((*window-format* "%t"))
    (windowlist)))

(setf *float-window-title-height* 15)

(let ((map *top-map*))                  ; no prefix key
  (define-key map (kbd "s-h") "move-focus left")
  (define-key map (kbd "s-j") "move-focus down")
  (define-key map (kbd "s-k") "move-focus up")
  (define-key map (kbd "s-l") "move-focus right")

  ;; Swap windows
  (define-key map (kbd "s-H") "exchange-direction left")
  (define-key map (kbd "s-J") "exchange-direction down")
  (define-key map (kbd "s-K") "exchange-direction up")
  (define-key map (kbd "s-L") "exchange-direction right")

  ;; Execute shell command/program
  ;; (define-key map (kbd "s-TAB") "pull-from-windowlist")
  (define-key map (kbd "s-TAB") "pull-hidden-other")
  (define-key map (kbd "s-p") "pull-hidden-previous")
  (define-key map (kbd "s-n") "pull-hidden-next")

  ;; Manage window splits
  (define-key map (kbd "s-o") "only")
  (define-key map (kbd "s-c") "remove-split")
  (define-key map (kbd "s-s") "vsplit")
  (define-key map (kbd "s-v") "hsplit")
  (define-key map (kbd "s-=") "balance-frames")

  ;; resize
  (define-key map (kbd "s-r") "iresize")

  ;; windowlist
  (define-key map (kbd "s-\"") "my-windowlist")

  ;; move mouse to current window
  (define-key map (kbd "s-b") "beckon"))

;; Make frame fullscreen
(define-key *root-map* (kbd "f") "fullscreen")

;; Programs

(defcommand emacsclient () ()
  (run-or-raise "emacsclient -c -n"
                '(:class "Emacs")))
(defcommand firefox () ()
  (run-or-raise "firefox"
                '(:class "firefox")))
(defcommand qutebrowser () ()
  (run-or-raise "qutebrowser"
                '(:class "qutebrowser")))
(defcommand alacritty () ()
  (run-or-raise "alacritty"
                '(:class "Alacritty")))
(defcommand thunar () ()
  (run-or-raise "thunar"
                '(:class "Thunar")))

;; Jump to program, opening it if it isn't found
(defvar *open-program-bindings*
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "e") "emacsclient") ; edit
    (define-key map (kbd "w") "qutebrowser") ; web
    (define-key map (kbd "t") "alacritty") ; term
    (define-key map (kbd "f") "thunar") ; files
    ;; new windows
    (define-key map (kbd "E") "exec emacsclient -c -n")
    (define-key map (kbd "W") "exec qutebrowser")
    (define-key map (kbd "T") "exec alacritty")
    (define-key map (kbd "F") "exec thunar")
    map))
(define-key *top-map* (kbd "s-a") '*open-program-bindings*)

;; Power menu

(defcommand hibernate () ()
  (when (y-or-n-p (format nil "Hibernate machine?~&Confirm? "))
    (close-all-apps)
    (run-hook *quit-hook*)
    (run-shell-command "systemctl hibernate")))

(load-module "end-session")

(define-key *top-map* (kbd "s-Q") "end-session")
;; 
;; Local Variables:
;; eval: (outline-minor-mode)
;; End:
