;; -*-lisp-*-
;;
;; My configuration for the Stump Window Manager.  Keybindings are chosen to
;; reflect vim.

;; Dependencies: brightnessctl, nm-applet, pamixer, stumpwm-contrib,
;; stumpwm-dmenu

(in-package :stumpwm)

(load "/usr/lib/quicklisp/setup.lisp")

;; Setup REPL
;; Connect from Emacs with `M-x sly-connect 1234'
(ql:quickload "slynk")

(defvar *is-slynk-started* nil)
(defcommand toggle-slynk () ()
  (if *is-slynk-started*
      (progn
        (slynk:stop-server 1234)
        (setf *is-slynk-started* nil)
        (message "Slynk server ended."))
      (progn
        (slynk:create-server :port 1234 :dont-close t)
        (setf *is-slynk-started* t)
        (message "Slynk server started on port 1234."))))

;; Change focus on click
(setf *mouse-focus-policy* :click)

;; `s-q b' hides mouse
(setf *banish-pointer-to* :screen)

;;; Interface

;;;; Font
(ql:quickload "clx-truetype")
(load-module "ttf-fonts")
(xft:cache-fonts)
(set-font (make-instance 'xft:font :family "Meslo LG S" :subfamily "Regular" :size 11))

;;;; Gaps

(load-module "swm-gaps")
(setf swm-gaps::*head-gaps-size* 0)
(setf swm-gaps::*inner-gaps-size* 5)
(setf swm-gaps::*outer-gaps-size* 10)

(swm-gaps::toggle-gaps-on)

;;;; Modeline
(load-module "battery-portable")
(load-module "mpd")
(setf battery-portable::*no-battery-info* "")

;; colors
(setq *mode-line-background-color* "#000000")
(setq *mode-line-foreground-color* "#ffffff")

;; format
(setf *group-format* " %t ")
(setf *window-format* "%m%c%m")
;; (setf *screen-mode-line-format* (list "[^B%n^b] %W^>%m %d | %B   "))
(setf *screen-mode-line-format* '("[^B%g^b] %W^>%d | %B   "))
(setf *time-modeline-string* "%a %b %e %l:%M %p")
(setf *mode-line-timeout* 2)

(enable-mode-line (current-screen) (current-head) t)

(defcommand toggle-ml () ()
  (toggle-mode-line (current-screen) (current-head)))

;; systray
(ql:quickload "xembed")
(load-module "stumptray")
(stumptray::stumptray)
(run-shell-command "nm-applet")

;;; Launching Programs

;; TODO: figure out how to avoid hardcoding this path
;; you must clone https://gitlab.com/sasanidas/stumpwm-dmenu.git first
(add-to-load-path "~/.stumpwm.d/modules/stumpwm-dmenu/")
(load-module "dmenu")

(setf dmenu::*dmenu-font* "13")

(define-key *top-map* (kbd "s-;") "dmenu-call-command")
(define-key *top-map* (kbd "s-SPC") "dmenu-run")
(define-key *top-map* (kbd "s-f") "dmenu-windowlist")
(define-key *top-map* (kbd "s-:") "dmenu-eval-lisp")

;;; Audio
;; Commands are run with pamixer.

(defcommand vol-up (arg) ((:number "Increase volume by: "))
  (run-shell-command (format nil "pamixer -i ~S"
                             arg))
  (message (run-shell-command "pamixer --get-volume-human" t)))

(defcommand vol-down (arg) ((:number "Decrease volume by: "))
  (run-shell-command (format nil "pamixer -d ~S"
                             arg))
  (message (run-shell-command "pamixer --get-volume-human" t)))

(defcommand vol-mute () ()
  (run-shell-command "pamixer -t")
  (message (run-shell-command "pamixer --get-volume-human" t)))

(define-key *top-map* (kbd "XF86AudioRaiseVolume") "vol-up 5")
(define-key *top-map* (kbd "XF86AudioLowerVolume") "vol-down 5")
(define-key *top-map* (kbd "M-S-F7") "vol-up 2")
(define-key *top-map* (kbd "M-S-F6") "vol-down 2")
(define-key *top-map* (kbd "XF86AudioMute") "vol-mute")

;;; Brightness
;; Commands are run with brightnessctl.

(defun light-info ()
  (message (run-shell-command "brightnessctl g" t)))

(defcommand light-up (arg) ((:number "Increase brightness by: "))
  (run-shell-command (format nil "brightnessctl s +~D%"
                             arg))
  (light-info))

(defcommand light-down (arg) ((:number "Decrease brightness by: "))
  (run-shell-command (format nil "brightnessctl s ~D%-"
                             arg))
  (light-info))

(define-key *top-map* (kbd "XF86MonBrightnessUp") "light-up 4")
(define-key *top-map* (kbd "XF86MonBrightnessDown") "light-down 4")
(define-key *top-map* (kbd "M-S-F2") "light-down 2")
(define-key *top-map* (kbd "M-S-F3") "light-up 2")

;;; Keymaps
(set-prefix-key (kbd "s-q"))            ; Reflects tmux prefix key `C-q'

(define-key *top-map* (kbd "s-h") "move-focus left")
(define-key *top-map* (kbd "s-j") "move-focus down")
(define-key *top-map* (kbd "s-k") "move-focus up")
(define-key *top-map* (kbd "s-l") "move-focus right")
;; Swap windows
(define-key *top-map* (kbd "s-H") "exchange-direction left")
(define-key *top-map* (kbd "s-J") "exchange-direction down")
(define-key *top-map* (kbd "s-K") "exchange-direction up")
(define-key *top-map* (kbd "s-L") "exchange-direction right")
;; Execute shell command/program
(define-key *top-map* (kbd "s-TAB") "pull-from-windowlist")
(define-key *top-map* (kbd "s-p") "pull-hidden-previous")
(define-key *top-map* (kbd "s-n") "pull-hidden-next")
;; Manage window splits
(define-key *top-map* (kbd "s-o") "only")
(define-key *top-map* (kbd "s-c") "remove-split")
(define-key *top-map* (kbd "s-s") "vsplit")
(define-key *top-map* (kbd "s-v") "hsplit")
(define-key *top-map* (kbd "s-=") "balance-frames")

;; Groups

(define-key *top-map* (kbd "s-g") *groups-map*)
(define-key *groups-map* (kbd "f") "gnew-float")

;; Programs

(defcommand emacsclient () ()
  (run-or-pull "emacsclient -c -n"
               '(:class "Emacs")))
(defcommand firefox () ()
  (run-or-pull "firefox"
               '(:class "firefox")))
(defcommand qutebrowser () ()
  (run-or-pull "qutebrowser"
               '(:class "qutebrowser")))
(defcommand alacritty () ()
  (run-or-pull "alacritty"
               '(:class "Alacritty")))
(defcommand thunar () ()
  (run-or-pull "thunar"
               '(:class "Thunar")))

;; Jump to program, opening it if it isn't found
(defvar *open-program-bindings*
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "e") "emacsclient") ; edit
    (define-key map (kbd "w") "qutebrowser")     ; web
    (define-key map (kbd "t") "alacritty")   ; term
    (define-key map (kbd "f") "thunar")      ; files
    map))
(define-key *top-map* (kbd "s-a") '*open-program-bindings*)

;; Power menu
(defcommand shutdown () ()
  (if (y-or-n-p (format nil "Shut down machine?~&Confirm? "))
      (run-shell-command "systemctl shutdown")))

(defcommand reboot () ()
  (if (y-or-n-p (format nil "Reboot machine?~&Confirm? "))
      (run-shell-command "systemctl reboot")))

(defcommand suspend () ()
  (if (y-or-n-p (format nil "Suspend machine?~&Confirm? "))
      (run-shell-command "systemctl suspend")))

(defcommand hibernate () ()
  (if (y-or-n-p (format nil "Hibernate machine?~&Confirm? "))
      (run-shell-command "systemctl shutdown")))

(defvar *system-bindings*
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "q") "quit-confirm")
    (define-key map (kbd "Q") "shutdown")
    (define-key map (kbd "r") "reboot")
    (define-key map (kbd "s") "suspend")
    (define-key map (kbd "h") "hibernate")
    map))

(define-key *top-map* (kbd "s-Q") *system-bindings*)
;; 
;; Local Variables:
;; eval: (outline-minor-mode)
;; End:
